#ifndef __SOBER128TAB_H__
#define __SOBER128TAB_H__
#ifndef __DECL_SOBER128TAB_H__
#define __DECL_SOBER128TAB_H__ extern
#endif

/**
   @file sober128tab.h
   SOBER-128 Tables
*/
/* $ID$ */
/* @(#)TuringMultab.h   1.3 (QUALCOMM) 02/09/03 */
/* Multiplication table for Turing using 0xD02B4367 */
__DECL_SOBER128TAB_H__ const ulong32 Multab[256];

/* $ID$ */
/* Sbox for SOBER-128 */
/*
 * This is really the combination of two SBoxes; the least significant
 * 24 bits comes from:
 * 8->32 Sbox generated by Millan et. al. at Queensland University of
 * Technology. See: E. Dawson, W. Millan, L. Burnett, G. Carter,
 * "On the Design of 8*32 S-boxes". Unpublished report, by the
 * Information Systems Research Centre,
 * Queensland University of Technology, 1999.
 *
 * The most significant 8 bits are the Skipjack "F table", which can be
 * found at http://csrc.nist.gov/CryptoToolkit/skipjack/skipjack.pdf .
 * In this optimised table, though, the intent is to XOR the word from
 * the table selected by the high byte with the input word. Thus, the
 * high byte is actually the Skipjack F-table entry XORED with its
 * table index.
 */
__DECL_SOBER128TAB_H__ const ulong32 Sbox[256];

#endif /* __SOBER128TAB_H__ */

/* $Source$ */
/* $Revision$ */
/* $Date$ */
